# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

name: $(Rev:r)

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: demo
  - name: BUILD_NUMBER
    value: $(Build.BuildNumber)

steps:
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        echo "Downloading JDK 17"
        sudo mkdir -p /builds/binaries/externals/
        curl -L https://download.java.net/java/GA/jdk17/0d483333a00540d886896bac774ff48b/35/GPL/openjdk-17_linux-x64_bin.tar.gz -o /tmp/openjdk-17_linux-x64_bin.tar.gz
        cd /builds/binaries/externals/
        gzip -dc /tmp/openjdk-17_linux-x64_bin.tar.gz | sudo tar xvf -
        rm /tmp/openjdk-17_linux-x64_bin.tar.gz
        echo $JAVA_HOME_17_X64
        echo $JAVA_HOME
        cd /home/vsts/work/1/s
        git submodule init
        git submodule update --remote --merge
  - script: |
      BASE_VERSION=$(cat gradle.properties|grep baseVersion|sed 's/baseVersion=//g')
      echo "##vso[task.setvariable variable=baseVersion;]$BASE_VERSION"
    displayName: 'Setting a baseVersion variable'
  - script: |
      echo "Building application version $(baseVersion).$(Build.BuildNumber)"
    displayName: 'Checking the build number'
  - task: JavaToolInstaller@0
    inputs:
      versionSpec: "17"
      jdkArchitectureOption: x64
      jdkSourceOption: "PreInstalled"
  - task: Gradle@2
    inputs:
      workingDirectory: ''
      gradleWrapperFile: 'gradlew'
      gradleOptions: '-Xmx3072m'
      options: '-PdockerUrl=unix:///var/run/docker.sock -PdockerKeysDir='
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '17'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
      testResultsFiles: '**/TEST-*.xml'
      tasks: 'clean build'
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
         cd $(Pipeline.Workspace)/s/build/libs
         ls -l
  - task: Docker@2
    inputs:
        containerRegistry: $(containerRegistry)
        command: 'build'
        Dockerfile: 'Dockerfile'
        repository: $(dockerRepository)
        arguments: --build-arg=VERSION=$(baseVersion).$(Build.BuildNumber)
        tags: |
          $(baseVersion).$(Build.BuildNumber)
          latest
  - task: Docker@2
    inputs:
        containerRegistry: $(containerRegistry)
        command: 'push'
        Dockerfile: 'Dockerfile'
        repository: $(dockerRepository)
        tags: |
          $(baseVersion).$(Build.BuildNumber)
          latest
  - task: publish-artifact@1
    inputs:
      apiToken: $(artifactz.apiToken)
      stage: 'Development'
      flow: 'Standard'
      name: 'demo-policy'
      type: 'DockerImage'
      version: $(baseVersion).$(Build.BuildNumber)
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Pipeline.Workspace)/s/deployment/swarm'
      artifactName: 'swarm'
      version: $(baseVersion).$(Build.BuildNumber)
